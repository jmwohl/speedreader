{
  "name": "readability-api",
  "version": "0.3.0",
  "description": "A Node wrapper for the Readability APIs",
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "devDependencies": {
    "mocha": "1.x",
    "nock": "0.x"
  },
  "dependencies": {
    "request": "2.x",
    "underscore": "1.x"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/robinjmurphy/node-readability-api.git"
  },
  "keywords": [
    "readability"
  ],
  "author": {
    "name": "robin@robinmurphy.co.uk"
  },
  "license": "MIT",
  "readme": "## node-readability-client\n\n[![Build Status](https://travis-ci.org/robinjmurphy/node-readability-api.png?branch=master)](https://travis-ci.org/robinjmurphy/node-readability-api)\n\nThis is a Node client for the [Readability](http://www.readability.com/) API. It currently supports the [Reader API](http://www.readability.com/developers/api/reader) and [Parser API](http://www.readability.com/developers/api/parser), with plans to add support for the [Shortener API](http://www.readability.com/developers/api/shortener).\n\n### Installation\n\n```bash\nnpm install readability-api\n```\n\nOr, in your package.json\n\n```json\n{\n    \"dependencies\": {\n        \"readability-api\": \"0.x\"\n    }\n}\n```\n\n### Usage\n\nInitialize the client\n\n```javascript\nvar readability = require('readability-api');\n\nreadability.configure({\n    consumer_key: 'some_consumer_key',\n    consumer_secret: 'some_consumer_secret',\n    parser_token: 'some_parser_token'\n});\n```\n\n### Authentication\n\nRetrieve an OAuth access token and access token secret for a user\n\n```javascript\nreadability.xauth('some_username', 'some_password', function (err, tokens) {\n  // Use tokens.oauth_token and tokens.oauth_token_secret when creating a Reader API client\n})\n``` \n\n#### Reader API\n\nTo use the Reader API, create a Reader object using an OAuth token and token secret\n\n```javascript\nvar reader = new readability.reader({\n  access_token: 'some_access_token',\n  access_token_secret: 'some_access_token_secret'\n});\n```\n\n##### User information\n\n```javascript\n// Get information about the current user\nreader.user(function (err, user) {\n  //...\n});\n```\n\n##### Bookmarks\n\n```javascript\n// Get all bookmarks - response contains both metadata (pagination etc.) and an array of bookmarks\nreader.bookmarks(options, function (err, bookmarks) {\n   //... \n});\n\n// Get a bookmark by its id\nreader.bookmark('some_bookmark_id', function (err, bookmark) {\n   //... \n});\n\n// Add a bookmark - returns the created bookmark\nreader.addBookmark('http://some.bookmark.url.com/article.html', function (err, bookmark) {\n   //... \n});\n\n// Remove a bookmark - success is a boolean\nreader.removeBookmark('some_bookmark_id', function (err, success) {\n   //... \n});\n\n// Archive a bookmark - returns the archived bookmark\nreader.archiveBookmark('some_bookmark_id', function (err, bookmark) {\n   //... \n});\n\n// Unarchive a bookmark - returns the bookmark\nreader.unarchiveBookmark('some_bookmark_id', function (err, bookmark) {\n   //... \n});\n\n// Favourite a bookmark - returns the favourited bookmark\nreader.favouriteBookmark('some_bookmark_id', function (err, bookmark) {\n   //... \n});\n\n// Unavourite a bookmark - returns the bookmark\nreader.unfavouriteBookmark('some_bookmark_id', function (err, bookmark) {\n   //... \n});\n\n```\n\n##### Tags\n\n```javascript\n// Get all of the current user's tags - returns an array of tags\nreader.userTags(function (err, tags) {\n   //... \n});\n\n// Get all of the tags for a bookmark - returns an array of tags\nreader.tags('some_bookmark_id', function (err, tags) {\n   //... \n});\n\n// Add tags to a bookmark - returns an array of tags\nreader.addTags('some_bookmark_id', ['tag1', 'tag2', 'tag3'], function (err, bookmark) {\n    //...\n});\n\n// Remove a tag from a bookmark - returns the bookmark\nreader.removeTag('some_bookmark_id', 'some_tag_id', function (err, bookmark) {\n   //... \n});\n```\n\n##### Articles\n\n```javascript\n// Get a single article\nreader.article('some_article_id', function (err, article) {\n   //... \n});\n```\n\n#### Parser API\n\n```javascript\n// Create a parser object\nvar parser = new readability.parser();\n\n// Parse an article\nparser.parse('http://some.bookmark.url.com/article.html', function (err, parsed) {\n  //...\n});\n\n// Get the Parser confidence level - returns a number between 0 and 1\nparser.confidence('http://some.bookmark.url.com/article.html', function (err, confidence) {\n  //...\n});\n```\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/robinjmurphy/node-readability-api/issues"
  },
  "homepage": "https://github.com/robinjmurphy/node-readability-api",
  "_id": "readability-api@0.3.0",
  "dist": {
    "shasum": "f39e69cea858d257a3db342f00ac2747189b5b50"
  },
  "_from": "readability-api@",
  "_resolved": "https://registry.npmjs.org/readability-api/-/readability-api-0.3.0.tgz"
}
